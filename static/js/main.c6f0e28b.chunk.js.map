{"version":3,"sources":["App/Header/index.js","App/Form/currencies.js","App/Form/Result/index.js","App/Form/index.js","App/index.js","serviceWorker.js","index.js"],"names":["Header","className","currencies","short","name","rate","Result","result","undefined","amountPossessed","toFixed","possessedCurrency","amountRecived","wantedCurrency","Form","useState","setPossessedCurrency","amount","setAmount","setWantedCurrency","setResult","action","method","onSubmit","event","preventDefault","possessedCurrencyRate","find","currency","wantedCurrencyRate","calculateResult","value","onChange","target","map","key","type","step","placeholder","min","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oSAGMA,G,WAAS,kBACX,wBAAIC,UAAU,UAAd,mB,OCJEC,G,MAAa,CACf,CAACC,MAAO,MAAOC,KAAM,MAAOC,KAAM,GAClC,CAACF,MAAO,MAAOC,KAAM,MAAOC,KAAM,OAClC,CAACF,MAAO,MAAOC,KAAM,MAAOC,KAAM,QAClC,CAACF,MAAO,MAAOC,KAAM,MAAOC,KAAM,QAClC,CAACF,MAAO,MAAOC,KAAM,MAAOC,KAAM,UCHhCC,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACX,uBAAGN,UAAU,gDACGO,IAAXD,GACG,oCACKA,EAAOE,gBAAgBC,QAAQ,GADpC,OAC8CH,EAAOI,kBADrD,YAEI,gCAASJ,EAAOK,cAAcF,QAAQ,GAAtC,OAAgDH,EAAOM,mBCFjEC,EAAO,WAAO,IAAD,EACiCC,mBAASb,EAAW,GAAGE,MADxD,mBACVO,EADU,KACSK,EADT,OAEWD,mBAAS,IAFpB,mBAEVE,EAFU,KAEFC,EAFE,OAG2BH,mBAASb,EAAW,GAAGE,MAHlD,mBAGVS,EAHU,KAGMM,EAHN,OAIWJ,qBAJX,mBAIVR,EAJU,KAIFa,EAJE,KAwBjB,OACE,0BAAMnB,UAAU,OAAOoB,OAAO,GAAGC,OAAO,MAAMC,SAP3B,SAACC,GACpBA,EAAMC,iBAbgB,WACtB,IAAMC,EAAwBxB,EAAWyB,MAAK,SAAAC,GAAQ,OAAIA,EAASxB,OAASO,KAAmBN,KACzFwB,EAAqB3B,EAAWyB,MAAK,SAAAC,GAAQ,OAAIA,EAASxB,OAASS,KAAgBR,KAEzFe,EAAU,CACRX,iBAAkBQ,EAClBL,cAAeK,EAASS,EAAwBG,EAChDlB,oBACAE,mBAOFiB,KAKE,uBAAG7B,UAAU,mBACX,2BAAOA,UAAU,eACf,0BAAMA,UAAU,mBAAhB,uCACA,4BACEA,UAAU,cACV8B,MAAOpB,EACPqB,SAAU,SAAAR,GAAK,OAAIR,EAAqBQ,EAAMS,OAAOF,SAEpD7B,EAAWgC,KAAI,SAAAN,GAAQ,OACtB,4BACExB,KAAK,WACL2B,MAAOH,EAASxB,KAChB+B,IAAKP,EAASzB,OAEbyB,EAASxB,YAOpB,uBAAGH,UAAU,mBACX,2BAAOA,UAAU,eACf,0BAAMA,UAAU,mBAAhB,UACA,2BACEmC,KAAK,SACLhC,KAAK,SACLiC,KAAK,OACLC,YAAY,mBACZrC,UAAU,cAAcsC,IAAI,IAC5BC,UAAQ,EACRT,MAAOd,EACPe,SAAU,SAAAR,GAAK,OAAIN,EAAUM,EAAMS,OAAOF,YAKhD,uBAAG9B,UAAU,mBACX,2BAAOA,UAAU,eACf,0BAAMA,UAAU,mBAAhB,wCACA,4BACEA,UAAU,cACV8B,MAAOlB,EACPmB,SAAU,SAAAR,GAAK,OAAIL,EAAkBK,EAAMS,OAAOF,SAEjD7B,EAAWgC,KAAI,SAAAN,GAAQ,OACtB,4BACExB,KAAK,WACL2B,MAAOH,EAASxB,KAChB+B,IAAKP,EAASzB,OAEbyB,EAASxB,YAOpB,uBAAGH,UAAU,mBACX,4BAAQA,UAAU,gBAAlB,aAEF,uBAAGA,UAAU,yCAAb,iJAIA,kBAAC,EAAD,CAAQM,OAAQA,M,MCjFPkC,MAVf,WAEE,OACE,yBAAKxC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c6f0e28b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Header = () => (\r\n    <h1 className=\"header\">Kantor Online</h1>\r\n);\r\n\r\nexport { Header };","const currencies = [\r\n    {short: \"pln\", name: \"PLN\", rate: 1},\r\n    {short: \"eur\", name: \"EUR\", rate: 4.4660},\r\n    {short: \"usd\", name: \"USD\", rate: 3.9806},\r\n    {short: \"gbp\", name: \"GBP\", rate: 4.8851},\r\n    {short: \"chf\", name: \"CHF\", rate: 4.1818},\r\n];\r\n\r\nexport {currencies};","import React from \"react\";\r\n\r\nconst Result = ({ result }) => (\r\n    <p className=\"form__paragraph form__paragraph--result\">\r\n        {result !== undefined && (\r\n            <>\r\n                {result.amountPossessed.toFixed(2)}&nbsp;{result.possessedCurrency}&nbsp;=&nbsp;\r\n                <strong>{result.amountRecived.toFixed(2)}&nbsp;{result.wantedCurrency}</strong>\r\n            </>\r\n        )}\r\n    </p>\r\n);\r\n\r\nexport { Result };","import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\nimport { currencies } from \"./currencies\";\r\nimport { Result } from \"./Result\";\r\n\r\nconst Form = () => {\r\n  const [possessedCurrency, setPossessedCurrency] = useState(currencies[0].name);\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [wantedCurrency, setWantedCurrency] = useState(currencies[0].name);\r\n  const [result, setResult] = useState();\r\n\r\n  const calculateResult = () => {\r\n    const possessedCurrencyRate = currencies.find(currency => currency.name === possessedCurrency).rate;\r\n    const wantedCurrencyRate = currencies.find(currency => currency.name === wantedCurrency).rate;\r\n\r\n    setResult({\r\n      amountPossessed: +amount,\r\n      amountRecived: amount * possessedCurrencyRate / wantedCurrencyRate,\r\n      possessedCurrency,\r\n      wantedCurrency,\r\n    });\r\n  };\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    calculateResult();\r\n  };\r\n\r\n  return (\r\n    <form className=\"form\" action=\"\" method=\"GET\" onSubmit={onFormSubmit}>\r\n      <p className=\"form__paragraph\">\r\n        <label className=\"form__label\">\r\n          <span className=\"form__labelText\">Wymieniasz z (wybierz walutę):</span>\r\n          <select\r\n            className=\"form__input\"\r\n            value={possessedCurrency}\r\n            onChange={event => setPossessedCurrency(event.target.value)}\r\n          >\r\n            {currencies.map(currency => (\r\n              <option\r\n                name=\"currency\"\r\n                value={currency.name}\r\n                key={currency.short}\r\n              >\r\n                {currency.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n      </p>\r\n\r\n      <p className=\"form__paragraph\">\r\n        <label className=\"form__label\">\r\n          <span className=\"form__labelText\">Kwota:</span>\r\n          <input\r\n            type=\"number\"\r\n            name=\"amount\"\r\n            step=\"0.01\"\r\n            placeholder=\"Wpisz kwotę\"\r\n            className=\"form__input\" min=\"0\"\r\n            required\r\n            value={amount}\r\n            onChange={event => setAmount(event.target.value)}\r\n          />\r\n        </label>\r\n      </p>\r\n\r\n      <p className=\"form__paragraph\">\r\n        <label className=\"form__label\">\r\n          <span className=\"form__labelText\">Wymieniasz na (wybierz walutę):</span>\r\n          <select\r\n            className=\"form__input\"\r\n            value={wantedCurrency}\r\n            onChange={event => setWantedCurrency(event.target.value)}\r\n          >\r\n            {currencies.map(currency => (\r\n              <option\r\n                name=\"currency\"\r\n                value={currency.name}\r\n                key={currency.short}\r\n              >\r\n                {currency.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n      </p>\r\n\r\n      <p className=\"form__paragraph\">\r\n        <button className=\"form__button\">Przelicz</button>\r\n      </p>\r\n      <p className=\"form__paragraph form__paragraph--info\">\r\n        *Wartości kursów walut aktualne na dzień 01.07.2020 r. według danych\r\n        pochodzących ze strony Narodowego Banku Polskiego\r\n      </p>\r\n      <Result result={result} />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport { Form };","import React from 'react';\nimport { Header } from \"./Header\";\nimport { Form } from \"./Form\";\nimport \"./style.css\"\n\nfunction App() {\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}